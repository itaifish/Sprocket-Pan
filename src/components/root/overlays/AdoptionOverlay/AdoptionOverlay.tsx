import { OrphanData } from '@/managers/data/WorkspaceDataManager';
import { selectEndpoints, selectServices } from '@/state/active/selectors';
import { Button, Sheet, Stack, Typography } from '@mui/joy';
import { useSelector } from 'react-redux';
import { OrphanResolution, OrphanResolutionDropdown } from './OrphanResolutionDropdown';
import { useMemo, useState } from 'react';
import { Check, Timer } from '@mui/icons-material';
import { OrphanResolutionSummary } from './OrphanResolutionSummary';
import { SprocketTooltip } from '@/components/shared/SprocketTooltip';
import { useAppDispatch } from '@/state/store';
import { activeActions } from '@/state/active/slice';
import { addNewService } from '@/state/active/thunks/services';
import { tabsActions } from '@/state/tabs/slice';
import { deleteEndpoint } from '@/state/active/thunks/endpoints';

interface AdoptionOverlayProps {
	orphans: OrphanData | null;
	onClose: () => void;
}

export function AdoptionOverlay({ orphans, onClose }: AdoptionOverlayProps) {
	const services = useSelector(selectServices);
	const endpoints = useSelector(selectEndpoints);
	const [strategy, setStrategy] = useState<Record<string, string | OrphanResolution>>({});
	if (orphans == null) return null;
	const serviceList = useMemo(() => Object.values(services), [services]);
	const endpointList = useMemo(() => Object.values(endpoints), [endpoints]);
	const dispatch = useAppDispatch();
	const onApply = async () => {
		let createdServiceId: string | null = null;
		const revivedServices = new Set();
		//let createdEndpointId: string | null = null;
		for (const item of orphans.endpoints) {
			switch (strategy[item.orphan.id]) {
				case undefined:
					return;
				case OrphanResolution.delete:
					dispatch(deleteEndpoint(item.orphan.id));
					return;
				case OrphanResolution.revive:
					if (item.parent == null) throw new Error('trying to revive a non-existent parent');
					if (!revivedServices.has(item.parent.id)) dispatch(activeActions.insertService(item.parent));
					revivedServices.add(item.parent.id);
					break;
				case OrphanResolution.create:
					if (createdServiceId == null) {
						createdServiceId = await dispatch(
							addNewService({
								description: 'Autogenerated Service',
								baseUrl: 'unknown',
								name: 'Autogenerated Service',
							}),
						).unwrap();
					}
					dispatch(activeActions.addEndpointToService({ endpointId: item.orphan.id, serviceId: createdServiceId }));
					break;
				default:
					dispatch(
						activeActions.addEndpointToService({ endpointId: item.orphan.id, serviceId: strategy[item.orphan.id] }),
					);
					break;
			}
		}
		//LGOCI
		dispatch(tabsActions.setOrphans(null));
	};
	return (
		<Sheet sx={{ overflowY: 'auto', px: '20px', height: '85vh', width: '600px', maxWidth: '100%' }}>
			<Stack gap={2} height="100%">
				<Typography level="body-md">
					Endpoints without parent Services and/or Requests without parent Endpoints have been detected. You can decide
					what to do with each of them using the dropdowns below.
				</Typography>
				{orphans.endpoints.length > 0 && <Typography level="title-md">Endpoints</Typography>}
				{orphans.endpoints.map(({ orphan, parent }) => {
					return (
						<OrphanResolutionDropdown
							value={strategy[orphan.id]}
							parentType="Service"
							key={orphan.id}
							name={orphan.name}
							parent={parent}
							adoptors={serviceList}
							onChange={(id) => setStrategy({ ...strategy, [orphan.id]: id })}
						/>
					);
				})}
				{orphans.requests.length > 0 && <Typography level="title-md">Requests</Typography>}
				{orphans.requests.map(({ orphan, parent }) => {
					return (
						<OrphanResolutionDropdown
							value={strategy[orphan.id]}
							parentType="Endpoint and Service"
							key={orphan.id}
							name={orphan.name}
							parent={parent}
							adoptors={endpointList}
							onChange={(id) => setStrategy({ ...strategy, [orphan.id]: id })}
						/>
					);
				})}
				<Typography level="title-md">Summary</Typography>
				<OrphanResolutionSummary strategy={strategy} />
				<Stack direction="row" gap={1} justifyContent="end">
					<SprocketTooltip text="Orphaned items will remain inaccessible until next workspace load.">
						<Button color="warning" startDecorator={<Timer />} onClick={onClose}>
							Decide Later
						</Button>
					</SprocketTooltip>
					<Button color="success" sx={{ width: '200px' }} startDecorator={<Check />} onClick={onApply}>
						Apply
					</Button>
				</Stack>
			</Stack>
		</Sheet>
	);
}
